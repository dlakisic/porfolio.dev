---
import { getCollection } from 'astro:content'
import Tags from './Tags.astro'
import { useTranslations, getCurrentLanguage } from '../i18n/utils'

const currentLang = getCurrentLanguage()
const t = useTranslations(currentLang)

const allPosts = await getCollection('blog')
const featuredPosts = allPosts
  .filter(post => post.data.featured === true)
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())

const hasFeaturedPosts = featuredPosts.length > 0
---

{hasFeaturedPosts && (
  <div class="featured-slider">
    <div class="mx-4 relative rounded-[40px] min-h-[500px] aspect-[16/9] overflow-hidden">
      {featuredPosts.map((post, index) => (
        <div 
          class:list={[
            "absolute inset-0 w-full h-full transition-all duration-700",
            index === 0 ? "opacity-100" : "opacity-0"
          ]}
          data-slide
        >
          <img
            src={post.data.heroImage}
            alt={post.data.title}
            class="absolute inset-0 w-full h-full object-cover slide-zoom"
          />
          <div class="absolute inset-0 bg-gradient-to-t from-black/75 via-black/50 to-transparent">
            <div class="absolute bottom-0 left-0 p-8 space-y-4">
              <h2 class="text-4xl font-bold text-white">
                {post.data.title}
              </h2>
              <p class="text-xl text-gray-200 max-w-2xl">
                {post.data.description}
              </p>
              <div class="flex items-center gap-4">
                <time class="text-gray-300">
                  {new Date(post.data.pubDate).toLocaleDateString('fr-FR', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                  })}
                </time>
                {post.data.tags && <Tags tags={post.data.tags} />}
              </div>
              <a 
                href={`/blog/${post.slug}`}
                class="inline-block px-6 py-3 mt-2 text-sm font-bold text-white bg-yellow-500 rounded-full hover:bg-yellow-400 transition"
              >
                {t('blog.readMore')}
              </a>
            </div>
          </div>
        </div>
      ))}

      {featuredPosts.length > 1 && (
        <div class="absolute bottom-8 right-8 flex gap-2 z-10">
          {featuredPosts.map((_, index) => (
            <button
              class:list={[
                "w-3 h-3 rounded-full transition-colors duration-300",
                index === 0 ? "bg-white" : "bg-white/50 hover:bg-white/75"
              ]}
              data-slide-btn={index}
              aria-label={`Slide ${index + 1}`}
            />
          ))}
        </div>
      )}
    </div>
  </div>
)}

<style>
  .slide-zoom {
    animation: zoom 10s linear infinite;
  }

  @keyframes zoom {
    0% {
      transform: scale(1.1);
    }
    100% {
      transform: scale(1);
    }
  }

  .featured-slider {
    margin-bottom: 2rem;
  }
</style>

<script>
  function initSlider() {
    const slides = document.querySelectorAll('[data-slide]')
    const buttons = document.querySelectorAll('[data-slide-btn]')
    let currentIndex = 0
    let intervalId = null

    function showSlide(index) {
      slides.forEach((slide, i) => {
        slide.classList.toggle('opacity-0', i !== index)
        slide.classList.toggle('opacity-100', i === index)
      })

      buttons.forEach((btn, i) => {
        btn.classList.toggle('bg-white', i === index)
        btn.classList.toggle('bg-white/50', i !== index)
      })
    }

    function nextSlide() {
      currentIndex = (currentIndex + 1) % slides.length
      showSlide(currentIndex)
    }

    function startAutoplay() {
      if (intervalId) clearInterval(intervalId)
      intervalId = setInterval(nextSlide, 5000)
    }

    function stopAutoplay() {
      if (intervalId) {
        clearInterval(intervalId)
        intervalId = null
      }
    }

    buttons.forEach((button, index) => {
      button.addEventListener('click', () => {
        currentIndex = index
        showSlide(currentIndex)
        stopAutoplay()
        startAutoplay()
      })

      button.addEventListener('mouseenter', () => {
        currentIndex = index
        showSlide(currentIndex)
        stopAutoplay()
      })

      button.addEventListener('mouseleave', startAutoplay)
    })

    if (slides.length > 1) {
      startAutoplay()
    }

    return () => {
      if (intervalId) clearInterval(intervalId)
    }
  }

  let cleanup = null

  document.addEventListener('astro:page-load', () => {
    cleanup = initSlider()
  })

  document.addEventListener('astro:before-swap', () => {
    if (cleanup) cleanup()
  })

  window.addEventListener('storage', (e) => {
    if (e.key === 'lang') {
      // Reload page to get new translations
      window.location.reload()
    }
  })
</script> 
---
import ExperienceItem from "./ExperienceItem.astro"
import { useTranslations, getCurrentLanguage, getAvailableTranslations } from '../i18n/utils'

const currentLang = getCurrentLanguage()
const t = useTranslations(currentLang)

// Get raw translations to handle objects properly
const translations = getAvailableTranslations()
const experienceData = translations[currentLang]?.experience || translations.fr.experience

// Force hardcoded values for company names to bypass translation issues
const COMPANIES = {
  additi: "Additi Media",
  vinci: "Vinci Facilities", 
  imago: "Ima.Go"
}

const EXPERIENCE = [
  {
    id: "additi",
    date: experienceData.additi_date || "Novembre 2023 - Mai 2025",
    title: experienceData.additi_role || "Gen AI Engineer",
    company: "Additi Media",
    description: experienceData.additi_description,
    skills: ["Python", "LangChain", "AzureOpenAI", "FastAPI", "Docker"]
  },
  {
    id: "vinci",
    date: experienceData.vinci_date || "Juillet - Septembre 2023",
    title: experienceData.vinci_role || "Data Manager",
    company: "Vinci Facilities",
    description: experienceData.vinci_description || "J'ai pu administrer une base de données SAP, créer des tableaux de bord et initier la création d'un système de gestion de stocks.",
    skills: ["SAP", "Power BI", "SQL"]
  },
  {
    id: "imago",
    date: experienceData.imago_date || "Septembre 2020 - Mars 2023",
    title: experienceData.imago_role || "Chef de Projet Data / IT",
    company: "Ima.Go",
    description: experienceData.imago_description,
    skills: ["Python", "Selenium", "Looker Studio", "Zoho", "No-code"]
  }
]


---

<section id="experience" class="scroll-m-20">
  <div class="flex flex-col">
    {
      EXPERIENCE.map(({ id, date, title, company, description, skills }) => (
        <ExperienceItem
          title={title}
          company={company}
          date={date}
          description={typeof description === 'string' ? description : description.intro}
          tags={skills}
        >
          {(id === 'additi' || id === 'imago') && typeof description === 'object' ? (
            <div class="experience-expandable relative" data-translate={`experience.${id}_description`}>
              <div class="projects-preview relative" style="min-height: 120px;">
                <div class="projects-container overflow-hidden transition-all duration-500 ease-in-out" data-projects style="max-height: 130px;">
                  {description.projects?.map((project: any) => (
                    <div class="mt-4">
                      <h4 class="font-semibold text-sm mb-2">{project.title}</h4>
                      <ul class="text-sm space-y-1 ml-4">
                        {project.items?.map((item: any) => (
                          <li>• <strong>{item.label} :</strong> {item.text}</li>
                        ))}
                      </ul>
                    </div>
                  ))}
                </div>
                <div class="flex items-center justify-center mt-3">
                  <button 
                    class="group flex items-center text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition-colors duration-200"
                    data-toggle-btn
                  >
                    <div class="h-px w-24 bg-current"></div>
                    <svg class="w-4 h-4 transition-transform duration-300 mx-1" data-icon fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                    <div class="h-px w-24 bg-current"></div>
                  </button>
                </div>
                <div class="fade-overlay absolute inset-0 z-20" data-fade style="pointer-events: none;"></div>
              </div>
            </div>
          ) : null}
        </ExperienceItem>
      ))
    }
  </div>
</section>

<script>
  import { getAvailableTranslations } from '../i18n/utils'
  
  const translations = getAvailableTranslations()
  type LanguageKey = 'fr' | 'en'

  function updateTranslations() {
    const lang = (localStorage.getItem('lang') || 'fr') as LanguageKey
    
    // Update experience items content
    const experienceSection = document.querySelector('#experience')
    if (!experienceSection) return
    
    // Get the new translations
    const sectionData = translations[lang]?.['experience']
    if (!sectionData) return
    
    // Update each experience item
    const experienceItems = experienceSection.querySelectorAll('[data-translate]')
    experienceItems.forEach(el => {
      const key = el.getAttribute('data-translate')
      if (key && key.includes('description')) {
        const translation = sectionData[key.split('.')[1]]
        
        if (typeof translation === 'object' && translation !== null) {
          // Handle structured description for Additi and Ima.Go
          const container = el as HTMLElement
          const projectsContainer = container.querySelector('[data-projects]')
          
          // Update projects
          if (projectsContainer && translation.projects) {
            projectsContainer.innerHTML = ''
            translation.projects.forEach((project: any) => {
              const projectDiv = document.createElement('div')
              projectDiv.className = 'mt-4'
              
              const title = document.createElement('h4')
              title.className = 'font-semibold text-sm mb-2'
              title.textContent = project.title
              projectDiv.appendChild(title)
              
              const list = document.createElement('ul')
              list.className = 'text-sm space-y-1 ml-4'
              
              project.items?.forEach((item: any) => {
                const listItem = document.createElement('li')
                listItem.innerHTML = `• <strong>${item.label} :</strong> ${item.text}`
                list.appendChild(listItem)
              })
              
              projectDiv.appendChild(list)
              projectsContainer.appendChild(projectDiv)
            })
          }
        }
      }
    })
    
    // Trigger a page reload to update the main content with new translations
    // This ensures ExperienceItem props are updated
    if (lang !== (document.documentElement.getAttribute('data-lang') || 'fr')) {
      document.documentElement.setAttribute('data-lang', lang)
      // The page will need to be reloaded for the new props to take effect
      window.location.reload()
    }
  }

  document.addEventListener('astro:page-load', updateTranslations)
  window.addEventListener('storage', (e) => {
    if (e.key === 'lang') {
      updateTranslations()
    }
  })

  // Handle expand/collapse functionality
  function initializeExpandables() {
    const expandables = document.querySelectorAll('.experience-expandable')
    
    expandables.forEach(expandable => {
      const toggleBtn = expandable.querySelector('[data-toggle-btn]') as HTMLButtonElement
      const projectsContainer = expandable.querySelector('[data-projects]') as HTMLElement
      const fadeOverlay = expandable.querySelector('[data-fade]') as HTMLElement
      const toggleIcon = expandable.querySelector('[data-icon]') as HTMLElement
      
      if (!toggleBtn || !projectsContainer || !fadeOverlay || !toggleIcon) return
      
      let isExpanded = false
      
      toggleBtn.addEventListener('click', () => {
        isExpanded = !isExpanded
        
        if (isExpanded) {
          // Expand
          const fullHeight = projectsContainer.scrollHeight + 40 // Add 40px for button space
          projectsContainer.style.maxHeight = projectsContainer.scrollHeight + 'px'
          expandable.querySelector('.projects-preview').style.minHeight = fullHeight + 'px'
          fadeOverlay.style.opacity = '0'
          toggleIcon.style.transform = 'rotate(180deg)'
        } else {
          // Collapse
          projectsContainer.style.maxHeight = '130px'
          expandable.querySelector('.projects-preview').style.minHeight = '120px'
          fadeOverlay.style.opacity = '1'
          toggleIcon.style.transform = 'rotate(0deg)'
        }
      })
    })
  }
  
  document.addEventListener('astro:page-load', initializeExpandables)
</script>

<style>
  .blur-overlay {
    -webkit-mask: linear-gradient(to top, black 0%, transparent 100%);
    mask: linear-gradient(to top, black 0%, transparent 100%);
  }
</style>